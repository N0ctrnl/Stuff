INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'GM:MinStatusToZoneAnywhere', '250', 'This setting overrides the minstatus setting in the zones table if set');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:MaxLevel', '60', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:LeaveCorpses', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:LeaveNakedCorpses', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:DeathExpLossLevel', '10', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:CorpseDecayTimeMS', '604800000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:AutosaveIntervalS', '300', '0=disabled');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:HPRegenMultiplier', '100', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:ManaRegenMultiplier', '100', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:EnduranceRegenMultiplier', '100', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Guild:MaxMembers', '2048', 'Max number of members allowed in a single guild');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Skills:MaxTrainTradeskills', '21', 'Highest skill level that tradeskills can be trained to from GM Trainers');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Pets:AttackCommandRange', '200', 'Range at which a pet will respond to attack commands');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:ZoneAutobootTimeoutMS', '120000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:ClientKeepaliveTimeoutMS', '32000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:FleeHPRatio', '8', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:ExemptMaxClientsStatus', '1', 'Exempt accounts from the MaxClientsPerIP and AddMaxClientsStatus rules:if their status is >= this value.  Default value: -1 (feature disabled)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:EnableFearPathing', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:MeleeBaseCritChance', '0', 'The base crit chance for non warriors:NOTE: This will apply to NPCs as well');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:WarBerBaseCritChance', '3', 'The base crit chance for warriors and berserkers:only applies to clients');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:BerserkBaseCritChance', '6', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:NPCBashKickLevel', '6', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:ConsumptionMultiplier', '800', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:AutoResistDiff', '15', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:ResistChance', '10', 'chance to resist given no resists and same level');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:ResistMod', '0.50', 'multiplier:chance to resist = this * ResistAmount');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:PartialHitChance', '0.6', 'The chance when a spell is resisted that it will partial hit.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:ClientBaseCritChance', '0', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:NPCPositonUpdateTicCount', '32', 'ms between intervals of sending a position update to the entire zone.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'NPC:MinorNPCCorpseDecayTimeMS', '600000', 'level<55');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'NPC:MajorNPCCorpseDecayTimeMS', '1800000', 'level>=55');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'NPC:UseItemBonusesForNonPets', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:ExpMultiplier', '1.0', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:EnableShadowrest', '0', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:GraveyardTimeMS', '1200000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Map:FixPathingZWhenLoading', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Map:FixPathingZAtWaypoints', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Map:FixPathingZWhenMoving', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Map:FixPathingZOnSendTo', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:ClientLinkdeadMS', '90000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Map:FixPathingZMaxDeltaSendTo', '20', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Map:FixPathingZMaxDeltaLoading', '20', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Map:FixPathingZMaxDeltaMoving', '20', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Map:FixPathingZMaxDeltaWaypoint', '20', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:HealOnLevel', 'false', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:FeignKillsPet', 'false', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:ItemManaRegenCap', '15', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:ItemHealthRegenCap', '15', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:UseIntervalAC', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:PetAttackMagicLevel', '30', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'NPC:SayPauseTimeInSec', '10', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'NPC:OOCRegen', '10000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Watermap:CheckWaypointsInWaterWhenLoading', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Watermap:CheckForWaterAtWaypoints', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Watermap:CheckForWaterWhenMoving', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Watermap:CheckForWaterOnSendTo', 'false', 'Checks if a mob has moved into/out of water on SendTo');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Watermap:CheckForWaterWhenFishing', 'true', 'Only lets a player fish near water (if a water map exists for the zone)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Watermap:FishingRodLength', '30', 'How far in front of player water must be for fishing to work');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Watermap:FishingLineLength', '100', 'If water is more than this far below the player:it is considered too far to fish');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Aggro:SmartAggroList', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Aggro:SittingAggroMod', '25', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Aggro:MeleeRangeAggroMod', '10', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Aggro:CurrentTargetAggroMod', '0', '0 will prefer our current target to any other, > 0 makes it harder for our npcs to switch targets.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Aggro:CriticallyWoundedAggroMod', '100', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:AssistNoTargetSelf', 'false', 'When assisting a target without a target: true = target self, false = leave target as was before assist (this is the behavior on live)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'NPC:BuffFriends', 'false', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Aggro:SpellAggroMod', '80', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Aggro:SongAggroMod', '20', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Aggro:PetSpellAggroMod', '50', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:DeathItemLossLevel', '10', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:EnableMQGhostDetector', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:EnableMQGateDetector', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:MaxClientsPerIP', '-1', 'Maximum number of clients allowed to connect per IP address if account status is < AddMaxClientsStatus.  Default value: -1 (feature disabled)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:EnableMQZoneDetector', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:EnableMQWarpDetector', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:FleeIfNotAlone', 'false', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:MQGhostExemptStatus', '80', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:MQGateExemptStatus', '80', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:MQZoneExemptStatus', '80', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:ItemDamageShieldCap', '30', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:ItemAccuracyCap', '150', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:ItemAvoidanceCap', '100', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:ItemCombatEffectsCap', '100', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:ItemShieldingCap', '35', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:ItemSpellShieldingCap', '35', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:ItemDoTShieldingCap', '35', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:ItemStunResistCap', '35', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:ItemStrikethroughCap', '35', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:MQWarpDetectionDistanceFactor', '9.0', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:MQWarpExemptStatus', '80', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:UseBannedIPsTable', 'true', 'Toggle whether or not to check incoming client connections against the Banned_IPs table. Set this value to false to disable this feature.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:PartialHitChanceFear', '0.25', 'The chance when a fear spell is resisted that it will partial hit.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'NPC:EmptyNPCCorpseDecayTimeMS', '0', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'NPC:CorpseUnlockTimer', '150000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'NPC:EnableNPCQuestJournal', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:SkillUpModifier', '100', 'skill ups are at 100%');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'TaskSystem:EnableTaskSystem', 'true', 'Globally enable or disable the Task system');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'TaskSystem:PeriodicCheckTimer', '5', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'TaskSystem:RecordCompletedTasks', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'TaskSystem:RecordCompletedOptionalActivities', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'TaskSystem:KeepOneRecordPerCompletedTask', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'TaskSystem:EnableTaskProximity', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:EnableTutorialButton', 'false', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:EnableReturnHomeButton', 'false', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:MaxLevelForTutorial', '15', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:MinOfflineTimeToReturnHome', '21600', '21600 seconds is 6 Hours');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:AddMaxClientsStatus', '1', 'Accounts with status >= this rule will be allowed to use the amount of accounts defined in the AddMaxClientsPerIP.  Default value: -1 (feature disabled)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:AddMaxClientsPerIP', '4', 'Maximum number of clients allowed to connect per IP address if account status is < ExemptMaxClientsStatus.  Default value: -1 (feature disabled)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:ClearTempMerchantlist', 'false', 'cavedude: Clears temp merchant items when world boots.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:MaxExpLevel', '60', 'Sets the Max Level attainable via Experience');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:AutoShutdownDelay', '5000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Chat:ServerWideOOC', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Chat:ServerWideAuction', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:AdjustProcPerMinute', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:AvgProcsPerMinute', '2.0', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:ProcPerMinDexContrib', '0.075', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:BaseProcChance', '0.035', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:ProcDexDivideBy', '11000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:BaseCritChance', '0', 'base % chance that everyone has to crit a spell');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:BaseCritRatio', '100', 'base % bonus to damage on a successful spell crit. 100 = 2x damage');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:WizCritLevel', '12', 'level wizards first get spell crits');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:WizCritChance', '5', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:WizCritRatio', '0', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:SharedBankPlat', 'false', 'off by default to prevent duping for now');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:ResistPerLevelDiff', '100', '8.5 resist per level difference.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:BaseHitChance', '66.0', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:AgiHitFactor', '0.01', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:DeathExpLossMultiplier', '.5', 'Adjust how much exp is lost');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:UseDeathExpLossMult', 'true', 'Adjust to use the above multiplier or to use code default.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:BindAnywhere', 'false', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:AccountSessionLimit', '1', 'Max number of characters allowed on at once from a single account (-1 is disabled)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:ExemptAccountLimitStatus', '200', 'Min status required to be exempt from multi-session per account limiting (-1 is disabled)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Bazaar:AuditTrail', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Bazaar:MaxSearchResults', '200', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:TutorialZoneID', '-1', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Bazaar:EnableWarpToTrader', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Bazaar:MaxBarterSearchResults', '200', 'The max results returned in the /barter search');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Mail:EnableMailSystem', 'true', 'If false:client wont bring up the Mail window.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Mail:ExpireTrash', '0', 'Time in seconds. 0 will delete all messages in the trash when the mailserver starts');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Mail:ExpireRead', '31536000', '1 Year. Set to -1 for never');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Mail:ExpireUnread', '31536000', '1 Year. Set to -1 for never');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Channels:RequiredStatusAdmin', '251', 'Required status to administer chat channels');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Channels:RequiredStatusListAll', '251', 'Required status to list all chat channels');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Channels:DeleteTimer', '1440', 'Empty password protected channels will be deleted after this many minutes');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Chat:EnableVoiceMacros', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:TranslocateTimeLimit', '0', 'If not zero:time in seconds to accept a Translocate.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'EventLog:RecordSellToMerchant', 'false', 'Record sales from a player to an NPC merchant in eventlog table');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'EventLog:RecordBuyFromMerchant', 'false', 'Record purchases by a player from an NPC merchant in eventlog table');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:AAExpMultiplier', '0.85', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:GMAccountIPList', 'true', 'Check ip list against GM Accounts:AntiHack GM Accounts.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Merchant:UsePriceMod', 'true', 'Use faction/charisma price modifiers.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Merchant:SellCostMod', '1.05', 'Modifier for NPC sell price.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Merchant:BuyCostMod', '0.95', 'Modifier for NPC buy price.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Merchant:PriceBonusPct', '4', 'Determines maximum price bonus from having good faction/CHA. Value is a percent.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Merchant:PricePenaltyPct', '4', 'Determines maximum price penalty from having bad faction/CHA. Value is a percent.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Merchant:ChaBonusMod', '3.45', 'Determines CHA cap:from 104 CHA. 3.45 is 132 CHA at apprehensive. 0.34 is 400 CHA at apprehensive.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Merchant:ChaPenaltyMod', '1.52', 'Determines CHA bottom:up to 102 CHA. 1.52 is 37 CHA at apprehensive. 0.98 is 0 CHA at apprehensive.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:HitFalloffMinor', '5.0', 'hit will fall off up to 5% over the initial level range');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:HitFalloffModerate', '7.0', 'hit will fall off up to 7% over the three levels after the initial level range');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:HitFalloffMajor', '50.0', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:HitBonusPerLevel', '1.2', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:WeaponSkillFalloff', '0.33', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:ArcheryHitPenalty', '0.45', 'Archery has a hit penalty to try to help balance it with the plethora of long term +hit modifiers for it');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Chat:EnableMailKeyIPVerification', 'false', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Chat:EnableAntiSpam', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Chat:MinStatusToBypassAntiSpam', '80', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Chat:MinimumMessagesPerInterval', '4', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Chat:MaximumMessagesPerInterval', '12', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Chat:MaxMessagesBeforeKick', '20', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Chat:IntervalDurationMS', '60000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Chat:KarmaUpdateIntervalMS', '1200000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:GroupExpMultiplier', '0.65', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:RaidExpMultiplier', '.8', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:MinGMAntiHackStatus', '11', 'Minimum GM status to check against AntiHack list');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:RestRegenPercent', '0', 'Set to >0 to enable rest state bonus HP and mana regen.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:RestRegenTimeToActivate', '60', 'Time in seconds for rest state regen to kick in.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:UsePEQZoneDebuffs', 'false', 'Will determine if #peqzone will debuff players or not when used.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:NPCBonusHitChance', '10', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:UseXPConScaling', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:LightBlueModifier', '40', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:BlueModifier', '90', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:WhiteModifier', '100', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:YellowModifier', '125', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:RedModifier', '150', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:KillsPerRaidLeadershipAA', '250', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:KillsPerGroupLeadershipAA', '250', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Adventure:ItemIDToEnablePorts', '41000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Adventure:MinNumberForGroup', '2', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Adventure:MaxNumberForGroup', '6', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Adventure:MinNumberForRaid', '7', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Adventure:MaxNumberForRaid', '36', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Adventure:MaxLevelRange', '9', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Adventure:NumberKillsForBossSpawn', '40', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Adventure:DistanceForRescueAccept', '10000.0', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Adventure:DistanceForRescueComplete', '2500.0', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Pathing:Aggro', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Pathing:AggroReturnToGrid', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Pathing:CandidateNodeRangeXY', '400.000000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:PEQZoneReuseTime', '300', 'Amount of time, in seconds, before you can reuse the #peqzone command');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:PEQZoneDebuff1', '4454', 'First debuff casted by #peqzone Default is Cursed Keepers Blight.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:PEQZoneDebuff2', '2209', 'Second debuff casted by #peqzone Default is Tendrils of Apathy.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'NPC:LastFightingDelayMovingMin', '5000', 'Minimum time (in ms) before mob goes home after all aggro loss');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'NPC:LastFightingDelayMovingMax', '20000', 'Maximum time (in ms) before mob goes home after all aggro loss');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:ArcheryBonusRequiresStationary', 'true', 'does the 2x archery bonus chance require a stationary npc');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'NPC:SmartLastFightingDelayMoving', 'true', 'When true, mobs that started going home previously will do so again immediately if still on FD hate list');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Pathing:CandidateNodeRangeZ', '50.0000000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Pathing:CullNodesFromEnd', '1', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Pathing:CullNodesFromStart', '1', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Pathing:Fear', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:ArcheryBaseDamageBonus', '1.3', 'Modifier to Base Archery Damage .5 = 50%, 1 = 100%, 2 = 200%');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Pathing:Guard', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Pathing:LOSCheckFrequency', '1000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Pathing:MaxNodesLeftForLOSCheck', '4', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Pathing:MinDistanceForLOSCheckLong', '1000000.00', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Pathing:MinDistanceForLOSCheckShort', '40000.0000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Pathing:MinNodesTraversedForLOSCheck', '3', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Pathing:RouteUpdateFrequencyLong', '5000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Pathing:RouteUpdateFrequencyNodeCount', '5', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Pathing:RouteUpdateFrequencyShort', '1000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Pathing:ZDiffThreshold', '10.0000000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Map:FindBestZHeightAdjust', '1', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Map:UseClosestZ', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:SacrificeMinLevel', '46', 'First level Sacrifice will work on');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:SacrificeMaxLevel', '59', 'Last level Sacrifice will work on');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:SacrificeItemID', '9963', 'Item ID of the item Sacrifice will return. Defaults to an Essence Emerald.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:MaxRampageTargets', '3', 'max number of people hit with rampage');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:MaxFlurryHits', '2', 'max number of extra hits from flurry');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:MonkDamageTableBonus', '10', '% bonus monks get to their damage table calcs');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:FlyingKickBonus', '25', '% Modifier that this skill gets to str and skill bonuses');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:DragonPunchBonus', '20', '% Modifier that this skill gets to str and skill bonuses');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:EagleStrikeBonus', '15', '% Modifier that this skill gets to str and skill bonuses');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:TigerClawBonus', '10', '% Modifier that this skill gets to str and skill bonuses');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:RoundKickBonus', '5', '% Modifier that this skill gets to str and skill bonuses');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'AA:MaxEffectSlots', '7', 'the highest slot # used in the aa_effects table. have to use MAX_AA_EFFECT_SLOTS for now');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:MaxFearDurationForPlayerCharacter', '4', '4 tics, each tic calculates every 6 seconds.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:MaxCharmDurationForPlayerCharacter', '15', '15 tics, each tic calculates every 6 seconds.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'AA:ExpPerPoint', '23976503', 'Amount of exp per AA. Is the same as the amount of exp to go from level 51 to level 52.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:MaxClientsSetByStatus', 'false', 'If True, IP Limiting will be set to the status on the account as long as the status is > MaxClientsPerIP');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:FleeSnareHPRatio', '21', 'HP at which snare will halt movement of a fleeing NPC.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Chat:KarmaGlobalChatLimit', '0', 'amount of karma you need to be able to talk in ooc/auction/chat below the level limit');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Chat:GlobalChatLevelLimit', '0', 'level limit you need to of reached to talk in ooc/auction/chat if your karma is too low.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:HotZoneBonus', '0.75', 'hot zone XP bonus');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:MarkMQWarpLT', 'false', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:EnableSpellGlobals', 'false', 'If true, spells check the spell_globals table against quest globals before allowing spells to scribe via quest::scribespell');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'NPC:ReturnNonQuestNoDropItems', 'false', 'Return NO DROP items on NPCs that do not have an EVENT_ITEM sub in their script');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:GuildBankZoneID', '345', 'ID of zone the Guild Bank works in. Default 345, guildhall');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:DeathExpLossMaxLevel', '255', 'Any level greater than this will no longer lose exp on death');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Skills:UseLimitTradeskillSearchSkillDiff', 'false', 'Enables the limit for the maximum difference between trivial and skill for recipe searches and favorites.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Skills:MaxTradeskillSearchSkillDiff', '50', 'The maximum difference in skill between the trivial of an item and the skill of the player if the trivial is higher than the skill. Recipes that have not been learnt or made at least once via the Experiment mode will be removed from searches based on this criteria.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:SoDClientUseSoDHPManaEnd', 'true', 'Setting this to true will allow SoD clients to use the SoD HP/Mana/End formulas and previous clients will use the old formulas');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:MaxBuffSlotsNPC', '15', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:MaxSongSlotsNPC', '10', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:MaxDiscSlotsNPC', '1', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:MaxTotalSlotsNPC', '26', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Chracter:DeathExpLossMaxLevel', '255', 'Any level greater than this will no longer lose exp on death');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:RespawnFromHover', 'false', 'Enable Respawn Window for SoF and later clients.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:RespawnFromHoverTimer', '300', 'Respawn Window Timer in Seconds.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:EnableBlockedBuffs', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:WarriorThreatBonus', '60', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:NPCBashKickStunChance', '15', 'Percent chance that a bash/kick will stun');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:ItemEnduranceRegenCap', '15', 'Endurance cap from items');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:ItemClairvoyanceCap', '250', 'Clairvoyance returns mana after a cast under certain circumstances');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:ItemHealAmtCap', '250', 'Heal Amt adds to heal spells based on their cast & recast time');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:ItemSpellDmgCap', '250', 'Spell Dmg adds to DD spells based on their cast & recast time');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:ItemDSMitigationCap', '50', 'Mitigates the effect of a damage shield');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:UseNewStatsWindow', 'true', 'New stats window shows so much it got the TSA seal of approval');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:ReflectType', '1', '0 = disabled, 1 = single target player spells only, 2 = all player spells, 3 = all single target spells, 4 = all spells');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:HasteCap', '100', 'Haste cap for item haste + spell haste(not including overhaste)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:MaxDraggedCorpses', '4', 'Maximum number of corpses that a player can /corpsedrag at once');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:DragCorpseDistance', '400.000000', 'If a player is using /corpsedrag and moving, the corpse will not move until the player exceeds this distance (NoRootNoZ)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:RestRegenEndurance', 'false', 'Whether rest regen will affect endurance or not');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:CorpseResTimeMS', '10800000', 'Time to res a corpse(ms)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:VirusSpreadDistance', '30', 'The distance a viral spell will jump to its next victim');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:ItemCastsUseFocus', 'false', 'If true, this allows item clickies to use focuses that have limited max levels on them');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:CheckCursorEmptyWhenLooting', 'true', 'If true, a player cannot loot a corpse (player or NPC) with an item on their cursor');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:ExpansionSettings', '63', 'Expansion settings. Affects client features related to expansions.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:PVPSettings', '0', 'PVP Settings, affects clients\' attack state and Sony-hardcoded checks for PVP rules.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:IsGMPetitionWindowEnabled', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:FVNoDropFlag', '0', 'Sets the FV ruleset to on or off. Enable with rule 2 for GM-trading only. Keep in mind this disables OOC chatter for GMs only if you choose that option.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:MinStatusForNoDropExemptions', '80', 'Enables bypassing of no-drop flags if status is set to this value and FVNoDropFlag is set to 2.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:SkillCapMaxLevel', '-1', 'Sets the Max Level used for Skill Caps (from skill_caps table).  Default of -1 makes it use MaxLevel rule value.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:StatCap', '0', 'Sets the Max Statistics Cap for PCs. 0 = feature disabled');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:MaintainIntoxicationAcrossZones', 'true', 'If true, alcohol effects are maintained across zoning and logging out/in.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Skills:MaxTrainSpecializations', '50', 'Max level a GM trainer will train casting specializations');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:ArcheryNPCMultiplier', '1.0', 'Multiplied by the min and max hit to determine npcs ranged dmg');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Console:SessionTimeOut', '600000', 'This sets the default timeout time for Telnet sessions (MS)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Guild:PlayerCreationAllowed', 'true', 'Allow players with Underfoot+ to create a guild via new UI window.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Guild:PlayerCreationLimit', '1', 'Allow players to create a guild using the window in Underfoot+');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Guild:PlayerCreationRequiredLevel', '0', 'Required level to use the UF+ window to create a new guild.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Guild:PlayerCreationRequiredStatus', '0', 'Required admin status to use UF+ window to create a new guild.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Guild:PlayerCreationRequiredTime', '0', 'Required Time Entitled on Account to be able to use UF+ window to create a new guild.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:LiveLikeFocusEffects', 'true', 'Makes certain healing, dmg and mana reduction focuses random like live');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'NPC:StartEnrageValue', '9', '% HP value that mobs will begin to enrage.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'NPC:LiveLikeEnrage', 'false', 'If enabled, will cause all non-player pets to lose the ability to enrage.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:ItemExtraDmgCap', '150', 'eg +bash, +frenzy dmg, etc');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:UseRaceClassExpBonuses', 'false', 'Setting this to true will enable Class and Racial experience rate bonuses');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:EnableDiscoveredItems', 'false', 'If enabled, it enables EVENT_DISCOVER_ITEM and also saves character names and timestamps');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:SumCorpseDecayTimeMS', '43200000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:DeleteStaleCorpeBackups', 'true', 'Deletes stale corpse backups older than 2 weeks.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:UsePlayerCorpseBackups', 'true', 'Keeps backups of player corpses.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:EnableXTargetting', 'false', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:AvgSpellProcsPerMinute', '6.0', 'Default = 6.0 Determines proc rate of spells applied from sympathetic focus effect');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:ResistFalloff', '67', 'Default = 67 Max that level that will adjust our resist chance based on level modifiers');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:CharismaEffectiveness', '10', 'Default 10 CHA = -1 resist mod. Deterimes how much resist modification charisma applies to charm/pacify checks.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:CharmBreakCheckChance', '25', 'Default 25. Determines percent chance for a charm break check to occur each buff tick.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:AvgDefProcsPerMinute', '2', 'Default 2. Determines defensive procs per minute.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:DefProcPerMinAgiContrib', '0.075', 'Default 25. Determines how much agility effects proc rate.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:SpecialAttackACBonus', '15', '(Default=15) Percent amount of damage per AC gained for certain special attacks (damage = AC*SpecialAttackACBonus/100).');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:FrenzyBonus', '0', 'Modify Frenzy skill damage by percent,');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:TauntSkillFalloff', '0.15', '(Default=0.33) For every taunt skill point thats not maxed you lose this % chance to taunt.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:MaxCastTimeReduction', '50', 'Max percent your spell cast time can be reduced by spell haste.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:RootBreakFromSpells', '55', 'Chance for root to break when cast on.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:DeathSaveCharismaMod', '3', 'Determines how much charisma effects chance of death save firing.(CHA*value/10)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:DivineInterventionHeal', '8000', 'Divine intervention heal amount.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Combat:NPCFlurryChance', '20', '(Default=20) Chance for NPC to flurry if special attack F ');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'AA:Stacking', 'false', 'Enable stacking of AA within the same series on all clients');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:AdditiveBonusValues', 'false', 'Allow certain bonuses to be calculated by adding together the value from each item, instead of taking the highest value. (ie Add together all Cleave Effects)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Character:PerCharacterQglobalMaxLevel', 'true', 'Allows Character Max Level based on qglobal \"CharMaxLevel');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'QueryServ:PlayerLogNPCKills', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'QueryServ:PlayerLogTrades', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'QueryServ:PlayerChatLogging', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'QueryServ:PlayerLogMoneyTrades', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'QueryServ:PlayerLogPCCoordinates', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Chat:FlowCommandstoPerl_EVENT_SAY', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'World:IPLimitDisconnectAll', 'false', 'Disconnect all current clients by IP if they go over the IP limit.  This should allow people to quickly reconnect in the case of dead sessions waiting to timeout.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Pets:UnTargetableSwarmPet', 'false', 'Set true to allow swarm pets to not be targeted by clients.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'QueryServ:MerchantLogTransactions', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'QueryServ:PlayerLogDeletes', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'QueryServ:PlayerLogHandins', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'QueryServ:PlayerLogMoves', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Mercs:AllowMercs', 'false', 'Turns mercs on for the server - will not load merc data if set to false.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Mercs:SuspendIntervalMS', '10000', 'Time interval for suspend command in milliseconds.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Mercs:UpkeepIntervalMS', '180000', 'Time interval for merc upkeep in milliseconds.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Mercs:SuspendIntervalS', '10', 'Time interval for suspend command in seconds.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Mercs:UpkeepIntervalS', '180', 'Time interval for merc upkeep in seconds.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Mercs:ScaleRate', '100', 'Allows scaling of merc stats vs livelike values.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Mercs:AggroRadius', '100', 'Determines the distance from which a merc will aggro target(also used to determine the distance at which a healer merc will begin healing a group member)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Mercs:AggroRadiusPuller', '25', 'Determines the distance from which a merc will aggro target, if they have the group role of puller (also used to determine the distance at which a healer merc will begin healing a group member, if they have the group role of puller)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:LevelBasedEXPMods', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:BuffLevelRestrictions', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Zone:WeatherTimer', '600', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Inventory:EnforceAugmentRestriction', 'false', 'Forces augment slot restrictions.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Inventory:EnforceAugmentUsability', 'false', 'Forces augmented item usability.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Inventory:EnforceAugmentWear', 'false', 'Forces augment wear slot validation.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:FearBreakCheckChance', '70', 'Chance for fear to do a resist check each tick. Decrease for longer fears.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('2', 'Spells:SuccorFailChance', '1', 'Determines chance for a succor spell not to teleport an invidual player.');

INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('3', 'Mercs:AllowMercs', 'false', '');

INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'AA:ExpPerPoint', '23976503', 'Amount of exp per AA. Is the same as the amount of exp to go from level 51 to level 52.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'AA:MaxEffectSlots', '7', 'the highest slot # used in the aa_effects table. have to use MAX_AA_EFFECT_SLOTS for now');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'AA:Stacking', 'false', 'Enable stacking of AA within the same series on all clients');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Adventure:DistanceForRescueAccept', '10000.0', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Adventure:DistanceForRescueComplete', '2500.0', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Adventure:ItemIDToEnablePorts', '41000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Adventure:MaxLevelRange', '9', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Adventure:MaxNumberForGroup', '6', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Adventure:MaxNumberForRaid', '36', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Adventure:MinNumberForGroup', '2', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Adventure:MinNumberForRaid', '7', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Adventure:NumberKillsForBossSpawn', '40', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Aggro:CriticallyWoundedAggroMod', '100', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Aggro:CurrentTargetAggroMod', '0', '0 will prefer our current target to any other, > 0 makes it harder for our npcs to switch targets.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Aggro:MeleeRangeAggroMod', '10', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Aggro:PetSpellAggroMod', '50', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Aggro:SittingAggroMod', '25', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Aggro:SmartAggroList', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Aggro:SongAggroMod', '20', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Aggro:SpellAggroMod', '80', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Bazaar:AuditTrail', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Bazaar:EnableWarpToTrader', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Bazaar:MaxBarterSearchResults', '200', 'The max results returned in the /barter search');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Bazaar:MaxSearchResults', '200', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Channels:DeleteTimer', '1440', 'Empty password protected channels will be deleted after this many minutes');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Channels:RequiredStatusAdmin', '251', 'Required status to administer chat channels');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Channels:RequiredStatusListAll', '251', 'Required status to list all chat channels');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:AAExpMultiplier', '0.85', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:AutosaveIntervalS', '300', '0=disabled');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:BindAnywhere', 'false', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:BlueModifier', '90', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:CheckCursorEmptyWhenLooting', 'true', 'If true, a player cannot loot a corpse (player or NPC) with an item on their cursor');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:ConsumptionMultiplier', '800', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:CorpseDecayTimeMS', '604800000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:CorpseResTimeMS', '10800000', 'Time to res a corpse(ms)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:DeathExpLossLevel', '10', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:DeathExpLossMaxLevel', '255', 'Any level greater than this will no longer lose exp on death');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:DeathExpLossMultiplier', '.5', 'Adjust how much exp is lost');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:DeathItemLossLevel', '10', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:DragCorpseDistance', '400.000000', 'If a player is using /corpsedrag and moving, the corpse will not move until the player exceeds this distance (NoRootNoZ)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:EnableDiscoveredItems', 'false', 'If enabled, it enables EVENT_DISCOVER_ITEM and also saves character names and timestamps');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:EnableXTargetting', 'false', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:EnduranceRegenMultiplier', '100', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:ExpMultiplier', '1.0', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:FeignKillsPet', 'false', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:GroupExpMultiplier', '0.65', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:HasteCap', '100', 'Haste cap for item haste + spell haste(not including overhaste)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:HealOnLevel', 'false', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:HPRegenMultiplier', '100', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:ItemAccuracyCap', '150', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:ItemAvoidanceCap', '100', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:ItemCastsUseFocus', 'false', 'If true, this allows item clickies to use focuses that have limited max levels on them');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:ItemClairvoyanceCap', '250', 'Clairvoyance returns mana after a cast under certain circumstances');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:ItemCombatEffectsCap', '100', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:ItemDamageShieldCap', '30', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:ItemDoTShieldingCap', '35', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:ItemDSMitigationCap', '50', 'Mitigates the effect of a damage shield');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:ItemEnduranceRegenCap', '15', 'Endurance cap from items');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:ItemExtraDmgCap', '150', 'eg +bash, +frenzy dmg, etc');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:ItemHealAmtCap', '250', 'Heal Amt adds to heal spells based on their cast & recast time');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:ItemHealthRegenCap', '15', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:ItemManaRegenCap', '15', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:ItemShieldingCap', '35', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:ItemSpellDmgCap', '250', 'Spell Dmg adds to DD spells based on their cast & recast time');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:ItemSpellShieldingCap', '35', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:ItemStrikethroughCap', '35', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:ItemStunResistCap', '35', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:KillsPerGroupLeadershipAA', '250', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:KillsPerRaidLeadershipAA', '250', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:LeaveCorpses', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:LeaveNakedCorpses', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:LightBlueModifier', '40', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:MaintainIntoxicationAcrossZones', 'true', 'If true, alcohol effects are maintained across zoning and logging out/in.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:ManaRegenMultiplier', '100', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:MaxCharmDurationForPlayerCharacter', '15', '15 tics, each tic calculates every 6 seconds.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:MaxDraggedCorpses', '4', 'Maximum number of corpses that a player can /corpsedrag at once');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:MaxExpLevel', '60', 'Sets the Max Level attainable via Experience');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:MaxFearDurationForPlayerCharacter', '4', '4 tics, each tic calculates every 6 seconds.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:MaxLevel', '60', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:MinStatusForNoDropExemptions', '80', 'Enables bypassing of no-drop flags if status is set to this value and FVNoDropFlag is set to 2.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:PerCharacterQglobalMaxLevel', 'true', 'Allows Character Max Level based on qglobal \"CharMaxLevel');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:RaidExpMultiplier', '.8', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:RedModifier', '150', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:RespawnFromHover', 'false', 'Enable Respawn Window for SoF and later clients.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:RespawnFromHoverTimer', '300', 'Respawn Window Timer in Seconds.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:RestRegenEndurance', 'false', 'Whether rest regen will affect endurance or not');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:RestRegenPercent', '0', 'Set to >0 to enable rest state bonus HP and mana regen.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:RestRegenTimeToActivate', '60', 'Time in seconds for rest state regen to kick in.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:SharedBankPlat', 'false', 'off by default to prevent duping for now');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:SkillCapMaxLevel', '-1', 'Sets the Max Level used for Skill Caps (from skill_caps table).  Default of -1 makes it use MaxLevel rule value.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:SkillUpModifier', '100', 'skill ups are at 100%');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:SoDClientUseSoDHPManaEnd', 'true', 'Setting this to true will allow SoD clients to use the SoD HP/Mana/End formulas and previous clients will use the old formulas');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:StatCap', '0', 'Sets the Max Statistics Cap for PCs. 0 = feature disabled');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:SumCorpseDecayTimeMS', '43200000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:UseDeathExpLossMult', 'true', 'Adjust to use the above multiplier or to use code default.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:UseNewStatsWindow', 'true', 'New stats window shows so much it got the TSA seal of approval');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:UseRaceClassExpBonuses', 'false', 'Setting this to true will enable Class and Racial experience rate bonuses');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:UseXPConScaling', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:WhiteModifier', '100', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Character:YellowModifier', '125', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Chat:EnableAntiSpam', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Chat:EnableMailKeyIPVerification', 'false', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Chat:EnableVoiceMacros', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Chat:FlowCommandstoPerl_EVENT_SAY', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Chat:GlobalChatLevelLimit', '0', 'level limit you need to of reached to talk in ooc/auction/chat if your karma is too low.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Chat:IntervalDurationMS', '60000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Chat:KarmaGlobalChatLimit', '0', 'amount of karma you need to be able to talk in ooc/auction/chat below the level limit');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Chat:KarmaUpdateIntervalMS', '1200000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Chat:MaximumMessagesPerInterval', '12', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Chat:MaxMessagesBeforeKick', '20', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Chat:MinimumMessagesPerInterval', '4', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Chat:MinStatusToBypassAntiSpam', '80', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Chat:ServerWideAuction', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Chat:ServerWideOOC', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Chracter:DeathExpLossMaxLevel', '255', 'Any level greater than this will no longer lose exp on death');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:AdjustProcPerMinute', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:AgiHitFactor', '0.01', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:ArcheryBaseDamageBonus', '1.3', 'Modifier to Base Archery Damage .5 = 50%, 1 = 100%, 2 = 200%');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:ArcheryBonusRequiresStationary', 'true', 'does the 2x archery bonus chance require a stationary npc');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:ArcheryHitPenalty', '0.45', 'Archery has a hit penalty to try to help balance it with the plethora of long term +hit modifiers for it');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:ArcheryNPCMultiplier', '1.0', 'Multiplied by the min and max hit to determine npcs ranged dmg');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:AssistNoTargetSelf', 'false', 'When assisting a target without a target: true = target self, false = leave target as was before assist (this is the behavior on live)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:AvgDefProcsPerMinute', '2', 'Default 2. Determines defensive procs per minute.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:AvgProcsPerMinute', '2.0', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:BaseHitChance', '66.0', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:BaseProcChance', '0.035', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:BerserkBaseCritChance', '6', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:ClientBaseCritChance', '0', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:DefProcPerMinAgiContrib', '0.075', 'Default 25. Determines how much agility effects proc rate.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:DragonPunchBonus', '20', '% Modifier that this skill gets to str and skill bonuses');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:EagleStrikeBonus', '15', '% Modifier that this skill gets to str and skill bonuses');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:EnableFearPathing', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:FleeHPRatio', '8', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:FleeIfNotAlone', 'false', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:FleeSnareHPRatio', '21', 'HP at which snare will halt movement of a fleeing NPC.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:FlyingKickBonus', '25', '% Modifier that this skill gets to str and skill bonuses');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:FrenzyBonus', '0', 'Modify Frenzy skill damage by percent,');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:HitBonusPerLevel', '1.2', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:HitFalloffMajor', '50.0', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:HitFalloffMinor', '5.0', 'hit will fall off up to 5% over the initial level range');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:HitFalloffModerate', '7.0', 'hit will fall off up to 7% over the three levels after the initial level range');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:MaxFlurryHits', '2', 'max number of extra hits from flurry');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:MaxRampageTargets', '3', 'max number of people hit with rampage');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:MeleeBaseCritChance', '0', 'The base crit chance for non warriors:NOTE: This will apply to NPCs as well');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:MonkDamageTableBonus', '10', '% bonus monks get to their damage table calcs');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:NPCBashKickLevel', '6', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:NPCBashKickStunChance', '15', 'Percent chance that a bash/kick will stun');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:NPCBonusHitChance', '10', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:NPCFlurryChance', '20', '(Default=20) Chance for NPC to flurry if special attack F ');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:PetAttackMagicLevel', '30', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:ProcDexDivideBy', '11000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:ProcPerMinDexContrib', '0.075', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:RoundKickBonus', '5', '% Modifier that this skill gets to str and skill bonuses');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:SpecialAttackACBonus', '15', '(Default=15) Percent amount of damage per AC gained for certain special attacks (damage = AC*SpecialAttackACBonus/100).');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:TauntSkillFalloff', '0.15', '(Default=0.33) For every taunt skill point thats not maxed you lose this % chance to taunt.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:TigerClawBonus', '10', '% Modifier that this skill gets to str and skill bonuses');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:UseIntervalAC', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:WarBerBaseCritChance', '3', 'The base crit chance for warriors and berserkers:only applies to clients');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:WarriorThreatBonus', '60', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Combat:WeaponSkillFalloff', '0.33', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Console:SessionTimeOut', '600000', 'This sets the default timeout time for Telnet sessions (MS)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'EventLog:RecordBuyFromMerchant', 'false', 'Record purchases by a player from an NPC merchant in eventlog table');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'EventLog:RecordSellToMerchant', 'false', 'Record sales from a player to an NPC merchant in eventlog table');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'GM:MinStatusToZoneAnywhere', '250', 'This setting overrides the minstatus setting in the zones table if set');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Guild:MaxMembers', '2048', 'Max number of members allowed in a single guild');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Guild:PlayerCreationAllowed', 'true', 'Allow players with Underfoot+ to create a guild via new UI window.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Guild:PlayerCreationLimit', '1', 'Allow players to create a guild using the window in Underfoot+');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Guild:PlayerCreationRequiredLevel', '0', 'Required level to use the UF+ window to create a new guild.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Guild:PlayerCreationRequiredStatus', '0', 'Required admin status to use UF+ window to create a new guild.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Guild:PlayerCreationRequiredTime', '0', 'Required Time Entitled on Account to be able to use UF+ window to create a new guild.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Inventory:EnforceAugmentRestriction', 'false', 'Forces augment slot restrictions.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Inventory:EnforceAugmentUsability', 'false', 'Forces augmented item usability.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Inventory:EnforceAugmentWear', 'false', 'Forces augment wear slot validation.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Mail:EnableMailSystem', 'true', 'If false:client wont bring up the Mail window.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Mail:ExpireRead', '31536000', '1 Year. Set to -1 for never');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Mail:ExpireTrash', '0', 'Time in seconds. 0 will delete all messages in the trash when the mailserver starts');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Mail:ExpireUnread', '31536000', '1 Year. Set to -1 for never');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Map:FindBestZHeightAdjust', '1', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Map:FixPathingZAtWaypoints', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Map:FixPathingZMaxDeltaLoading', '20', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Map:FixPathingZMaxDeltaMoving', '20', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Map:FixPathingZMaxDeltaSendTo', '20', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Map:FixPathingZMaxDeltaWaypoint', '20', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Map:FixPathingZOnSendTo', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Map:FixPathingZWhenLoading', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Map:FixPathingZWhenMoving', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Map:UseClosestZ', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Merchant:BuyCostMod', '0.95', 'Modifier for NPC buy price.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Merchant:ChaBonusMod', '3.45', 'Determines CHA cap:from 104 CHA. 3.45 is 132 CHA at apprehensive. 0.34 is 400 CHA at apprehensive.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Merchant:ChaPenaltyMod', '1.52', 'Determines CHA bottom:up to 102 CHA. 1.52 is 37 CHA at apprehensive. 0.98 is 0 CHA at apprehensive.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Merchant:PriceBonusPct', '4', 'Determines maximum price bonus from having good faction/CHA. Value is a percent.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Merchant:PricePenaltyPct', '4', 'Determines maximum price penalty from having bad faction/CHA. Value is a percent.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Merchant:SellCostMod', '1.05', 'Modifier for NPC sell price.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Merchant:UsePriceMod', 'true', 'Use faction/charisma price modifiers.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Mercs:AggroRadius', '100', 'Determines the distance from which a merc will aggro target(also used to determine the distance at which a healer merc will begin healing a group member)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Mercs:AggroRadiusPuller', '25', 'Determines the distance from which a merc will aggro target, if they have the group role of puller (also used to determine the distance at which a healer merc will begin healing a group member, if they have the group role of puller)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Mercs:AllowMercs', 'false', 'Turns mercs on for the server - will not load merc data if set to false.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Mercs:ScaleRate', '100', 'Allows scaling of merc stats vs livelike values.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Mercs:SuspendIntervalMS', '10000', 'Time interval for suspend command in milliseconds.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Mercs:SuspendIntervalS', '10', 'Time interval for suspend command in seconds.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Mercs:UpkeepIntervalMS', '180000', 'Time interval for merc upkeep in milliseconds.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Mercs:UpkeepIntervalS', '180', 'Time interval for merc upkeep in seconds.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'NPC:BuffFriends', 'false', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'NPC:CorpseUnlockTimer', '150000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'NPC:EmptyNPCCorpseDecayTimeMS', '0', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'NPC:EnableNPCQuestJournal', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'NPC:LastFightingDelayMovingMax', '20000', 'Maximum time (in ms) before mob goes home after all aggro loss');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'NPC:LastFightingDelayMovingMin', '5000', 'Minimum time (in ms) before mob goes home after all aggro loss');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'NPC:LiveLikeEnrage', 'false', 'If enabled, will cause all non-player pets to lose the ability to enrage.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'NPC:MajorNPCCorpseDecayTimeMS', '1800000', 'level>=55');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'NPC:MinorNPCCorpseDecayTimeMS', '1800000', 'level<55');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'NPC:OOCRegen', '10000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'NPC:ReturnNonQuestNoDropItems', 'false', 'Return NO DROP items on NPCs that do not have an EVENT_ITEM sub in their script');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'NPC:SayPauseTimeInSec', '10', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'NPC:SmartLastFightingDelayMoving', 'true', 'When true, mobs that started going home previously will do so again immediately if still on FD hate list');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'NPC:StartEnrageValue', '9', '% HP value that mobs will begin to enrage.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'NPC:UseItemBonusesForNonPets', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Pathing:Aggro', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Pathing:AggroReturnToGrid', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Pathing:CandidateNodeRangeXY', '400.000000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Pathing:CandidateNodeRangeZ', '50.0000000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Pathing:CullNodesFromEnd', '1', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Pathing:CullNodesFromStart', '1', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Pathing:Fear', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Pathing:Guard', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Pathing:LOSCheckFrequency', '1000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Pathing:MaxNodesLeftForLOSCheck', '4', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Pathing:MinDistanceForLOSCheckLong', '1000000.00', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Pathing:MinDistanceForLOSCheckShort', '40000.0000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Pathing:MinNodesTraversedForLOSCheck', '3', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Pathing:RouteUpdateFrequencyLong', '5000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Pathing:RouteUpdateFrequencyNodeCount', '5', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Pathing:RouteUpdateFrequencyShort', '1000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Pathing:ZDiffThreshold', '10.0000000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Pets:AttackCommandRange', '200', 'Range at which a pet will respond to attack commands');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Pets:UnTargetableSwarmPet', 'false', 'Set true to allow swarm pets to not be targeted by clients.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'QueryServ:MerchantLogTransactions', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'QueryServ:PlayerChatLogging', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'QueryServ:PlayerLogDeletes', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'QueryServ:PlayerLogHandins', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'QueryServ:PlayerLogMoneyTrades', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'QueryServ:PlayerLogMoves', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'QueryServ:PlayerLogNPCKills', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'QueryServ:PlayerLogPCCoordinates', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'QueryServ:PlayerLogTrades', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Skills:MaxTradeskillSearchSkillDiff', '50', 'The maximum difference in skill between the trivial of an item and the skill of the player if the trivial is higher than the skill. Recipes that have not been learnt or made at least once via the Experiment mode will be removed from searches based on this criteria.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Skills:MaxTrainSpecializations', '50', 'Max level a GM trainer will train casting specializations');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Skills:MaxTrainTradeskills', '21', 'Highest skill level that tradeskills can be trained to from GM Trainers');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Skills:UseLimitTradeskillSearchSkillDiff', 'false', 'Enables the limit for the maximum difference between trivial and skill for recipe searches and favorites.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:AdditiveBonusValues', 'false', 'Allow certain bonuses to be calculated by adding together the value from each item, instead of taking the highest value. (ie Add together all Cleave Effects)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:AutoResistDiff', '15', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:AvgSpellProcsPerMinute', '6.0', 'Default = 6.0 Determines proc rate of spells applied from sympathetic focus effect');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:BaseCritChance', '0', 'base % chance that everyone has to crit a spell');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:BaseCritRatio', '100', 'base % bonus to damage on a successful spell crit. 100 = 2x damage');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:BuffLevelRestrictions', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:CharismaEffectiveness', '10', 'Default 10 CHA = -1 resist mod. Deterimes how much resist modification charisma applies to charm/pacify checks.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:CharmBreakCheckChance', '25', 'Default 25. Determines percent chance for a charm break check to occur each buff tick.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:DeathSaveCharismaMod', '3', 'Determines how much charisma effects chance of death save firing.(CHA*value/10)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:DivineInterventionHeal', '8000', 'Divine intervention heal amount.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:EnableBlockedBuffs', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:EnableSpellGlobals', 'false', 'If true, spells check the spell_globals table against quest globals before allowing spells to scribe via quest::scribespell');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:FearBreakCheckChance', '70', 'Chance for fear to do a resist check each tick. Decrease for longer fears.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:LiveLikeFocusEffects', 'true', 'Makes certain healing, dmg and mana reduction focuses random like live');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:MaxBuffSlotsNPC', '15', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:MaxCastTimeReduction', '50', 'Max percent your spell cast time can be reduced by spell haste.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:MaxDiscSlotsNPC', '1', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:MaxSongSlotsNPC', '10', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:MaxTotalSlotsNPC', '26', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:PartialHitChance', '0.6', 'The chance when a spell is resisted that it will partial hit.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:PartialHitChanceFear', '0.25', 'The chance when a fear spell is resisted that it will partial hit.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:ReflectType', '1', '0 = disabled, 1 = single target player spells only, 2 = all player spells, 3 = all single target spells, 4 = all spells');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:ResistChance', '10', 'chance to resist given no resists and same level');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:ResistFalloff', '67', 'Default = 67 Max that level that will adjust our resist chance based on level modifiers');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:ResistMod', '0.50', 'multiplier:chance to resist = this * ResistAmount');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:ResistPerLevelDiff', '100', '8.5 resist per level difference.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:RootBreakFromSpells', '55', 'Chance for root to break when cast on.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:SacrificeItemID', '9963', 'Item ID of the item Sacrifice will return. Defaults to an Essence Emerald.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:SacrificeMaxLevel', '59', 'Last level Sacrifice will work on');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:SacrificeMinLevel', '46', 'First level Sacrifice will work on');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:SuccorFailChance', '1', 'Determines chance for a succor spell not to teleport an invidual player.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:TranslocateTimeLimit', '0', 'If not zero:time in seconds to accept a Translocate.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:VirusSpreadDistance', '30', 'The distance a viral spell will jump to its next victim');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:WizCritChance', '5', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:WizCritLevel', '12', 'level wizards first get spell crits');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Spells:WizCritRatio', '0', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'TaskSystem:EnableTaskProximity', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'TaskSystem:EnableTaskSystem', 'true', 'Globally enable or disable the Task system');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'TaskSystem:KeepOneRecordPerCompletedTask', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'TaskSystem:PeriodicCheckTimer', '5', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'TaskSystem:RecordCompletedOptionalActivities', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'TaskSystem:RecordCompletedTasks', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Watermap:CheckForWaterAtWaypoints', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Watermap:CheckForWaterOnSendTo', 'false', 'Checks if a mob has moved into/out of water on SendTo');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Watermap:CheckForWaterWhenFishing', 'true', 'Only lets a player fish near water (if a water map exists for the zone)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Watermap:CheckForWaterWhenMoving', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Watermap:CheckWaypointsInWaterWhenLoading', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Watermap:FishingLineLength', '100', 'If water is more than this far below the player:it is considered too far to fish');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Watermap:FishingRodLength', '30', 'How far in front of player water must be for fishing to work');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:AccountSessionLimit', '1', 'Max number of characters allowed on at once from a single account (-1 is disabled)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:AddMaxClientsPerIP', '4', 'Maximum number of clients allowed to connect per IP address if account status is < ExemptMaxClientsStatus.  Default value: -1 (feature disabled)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:AddMaxClientsStatus', '1', 'Accounts with status >= this rule will be allowed to use the amount of accounts defined in the AddMaxClientsPerIP.  Default value: -1 (feature disabled)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:ClearTempMerchantlist', 'false', 'cavedude: Clears temp merchant items when world boots.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:ClientKeepaliveTimeoutMS', '32000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:DeleteStaleCorpeBackups', 'true', 'Deletes stale corpse backups older than 2 weeks.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:EnableReturnHomeButton', 'false', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:EnableTutorialButton', 'false', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:ExemptAccountLimitStatus', '200', 'Min status required to be exempt from multi-session per account limiting (-1 is disabled)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:ExemptMaxClientsStatus', '1', 'Exempt accounts from the MaxClientsPerIP and AddMaxClientsStatus rules:if their status is >= this value.  Default value: -1 (feature disabled)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:ExpansionSettings', '63', 'Expansion settings. Affects client features related to expansions.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:FVNoDropFlag', '0', 'Sets the FV ruleset to on or off. Enable with rule 2 for GM-trading only. Keep in mind this disables OOC chatter for GMs only if you choose that option.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:GMAccountIPList', 'true', 'Check ip list against GM Accounts:AntiHack GM Accounts.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:GuildBankZoneID', '345', 'ID of zone the Guild Bank works in. Default 345, guildhall');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:IPLimitDisconnectAll', 'false', 'Disconnect all current clients by IP if they go over the IP limit.  This should allow people to quickly reconnect in the case of dead sessions waiting to timeout.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:IsGMPetitionWindowEnabled', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:MaxClientsPerIP', '-1', 'Maximum number of clients allowed to connect per IP address if account status is < AddMaxClientsStatus.  Default value: -1 (feature disabled)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:MaxClientsSetByStatus', 'false', 'If True, IP Limiting will be set to the status on the account as long as the status is > MaxClientsPerIP');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:MaxLevelForTutorial', '15', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:MinGMAntiHackStatus', '11', 'Minimum GM status to check against AntiHack list');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:MinOfflineTimeToReturnHome', '21600', '21600 seconds is 6 Hours');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:PVPSettings', '0', 'PVP Settings, affects clients\' attack state and Sony-hardcoded checks for PVP rules.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:TutorialZoneID', '-1', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:UseBannedIPsTable', 'true', 'Toggle whether or not to check incoming client connections against the Banned_IPs table. Set this value to false to disable this feature.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'World:ZoneAutobootTimeoutMS', '120000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:AutoShutdownDelay', '5000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:ClientLinkdeadMS', '90000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:EnableMQGateDetector', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:EnableMQGhostDetector', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:EnableMQWarpDetector', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:EnableMQZoneDetector', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:EnableShadowrest', '0', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:GraveyardTimeMS', '1200000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:HotZoneBonus', '0.75', 'hot zone XP bonus');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:LevelBasedEXPMods', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:MarkMQWarpLT', 'false', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:MQGateExemptStatus', '80', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:MQGhostExemptStatus', '80', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:MQWarpDetectionDistanceFactor', '9.0', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:MQWarpExemptStatus', '80', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:MQZoneExemptStatus', '80', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:NPCPositonUpdateTicCount', '32', 'ms between intervals of sending a position update to the entire zone.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:PEQZoneDebuff1', '4454', 'First debuff casted by #peqzone Default is Cursed Keepers Blight.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:PEQZoneDebuff2', '2209', 'Second debuff casted by #peqzone Default is Tendrils of Apathy.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:PEQZoneReuseTime', '300', 'Amount of time, in seconds, before you can reuse the #peqzone command');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:UsePEQZoneDebuffs', 'false', 'Will determine if #peqzone will debuff players or not when used.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:UsePlayerCorpseBackups', 'true', 'Keeps backups of player corpses.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('4', 'Zone:WeatherTimer', '600', '');

INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'AA:ExpPerPoint', '23976503', 'Amount of exp per AA. Is the same as the amount of exp to go from level 51 to level 52.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'AA:MaxEffectSlots', '7', 'the highest slot # used in the aa_effects table. have to use MAX_AA_EFFECT_SLOTS for now');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'AA:Stacking', 'false', 'Enable stacking of AA within the same series on all clients');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Adventure:DistanceForRescueAccept', '10000.0', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Adventure:DistanceForRescueComplete', '2500.0', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Adventure:ItemIDToEnablePorts', '41000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Adventure:MaxLevelRange', '9', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Adventure:MaxNumberForGroup', '6', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Adventure:MaxNumberForRaid', '36', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Adventure:MinNumberForGroup', '2', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Adventure:MinNumberForRaid', '7', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Adventure:NumberKillsForBossSpawn', '40', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Aggro:CriticallyWoundedAggroMod', '100', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Aggro:CurrentTargetAggroMod', '0', '0 will prefer our current target to any other, > 0 makes it harder for our npcs to switch targets.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Aggro:MeleeRangeAggroMod', '10', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Aggro:PetSpellAggroMod', '50', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Aggro:SittingAggroMod', '25', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Aggro:SmartAggroList', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Aggro:SongAggroMod', '20', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Aggro:SpellAggroMod', '80', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Bazaar:AuditTrail', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Bazaar:EnableWarpToTrader', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Bazaar:MaxBarterSearchResults', '200', 'The max results returned in the /barter search');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Bazaar:MaxSearchResults', '200', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Bots:BotAAExpansion', '8', 'The expansion through which bots will obtain AAs');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Bots:BotFinishBuffing', 'false', 'Allow for buffs to complete even if the bot caster is out of mana.  Only affects buffing out of combat.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Bots:BotGroupBuffing', 'true', 'Bots will cast single target buffs as group buffs, default is false for single. Does not make single target buffs work for MGB.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Bots:BotManaRegen', '3.0', 'Adjust mana regen for bots, 1 is fast and higher numbers slow it down 3 is about the same as players.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Bots:BotQuest', 'false', 'Optional quest method to manage bot spawn limits using the quest_globals name bot_spawn_limit, see: /bazaar/Aediles_Thrall.pl');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Bots:BotSpellQuest', 'false', 'Anita Thrall\'s (Anita_Thrall.pl) Bot Spell Scriber quests.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Bots:CreateBotCount', '50', 'Number of bots that each account can create');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Bots:SpawnBotCount', '2', 'Number of bots a character can have spawned at one time, You + 71 bots is a 12 group raid');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Channels:DeleteTimer', '1440', 'Empty password protected channels will be deleted after this many minutes');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Channels:RequiredStatusAdmin', '251', 'Required status to administer chat channels');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Channels:RequiredStatusListAll', '251', 'Required status to list all chat channels');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:AAExpMultiplier', '0.85', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:AutosaveIntervalS', '300', '0=disabled');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:BindAnywhere', 'false', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:BlueModifier', '90', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:CheckCursorEmptyWhenLooting', 'true', 'If true, a player cannot loot a corpse (player or NPC) with an item on their cursor');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:ConsumptionMultiplier', '800', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:CorpseDecayTimeMS', '604800000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:CorpseResTimeMS', '10800000', 'Time to res a corpse(ms)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:DeathExpLossLevel', '10', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:DeathExpLossMaxLevel', '255', 'Any level greater than this will no longer lose exp on death');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:DeathExpLossMultiplier', '.5', 'Adjust how much exp is lost');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:DeathItemLossLevel', '10', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:DragCorpseDistance', '400.000000', 'If a player is using /corpsedrag and moving, the corpse will not move until the player exceeds this distance (NoRootNoZ)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:EnableDiscoveredItems', 'false', 'If enabled, it enables EVENT_DISCOVER_ITEM and also saves character names and timestamps');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:EnableXTargetting', 'false', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:EnduranceRegenMultiplier', '100', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:ExpMultiplier', '1.0', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:FeignKillsPet', 'false', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:GroupExpMultiplier', '0.65', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:HasteCap', '100', 'Haste cap for item haste + spell haste(not including overhaste)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:HealOnLevel', 'false', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:HPRegenMultiplier', '100', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:ItemAccuracyCap', '150', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:ItemAvoidanceCap', '100', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:ItemCastsUseFocus', 'false', 'If true, this allows item clickies to use focuses that have limited max levels on them');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:ItemClairvoyanceCap', '250', 'Clairvoyance returns mana after a cast under certain circumstances');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:ItemCombatEffectsCap', '100', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:ItemDamageShieldCap', '30', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:ItemDoTShieldingCap', '35', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:ItemDSMitigationCap', '50', 'Mitigates the effect of a damage shield');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:ItemEnduranceRegenCap', '15', 'Endurance cap from items');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:ItemExtraDmgCap', '150', 'eg +bash, +frenzy dmg, etc');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:ItemHealAmtCap', '250', 'Heal Amt adds to heal spells based on their cast & recast time');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:ItemHealthRegenCap', '15', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:ItemManaRegenCap', '15', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:ItemShieldingCap', '35', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:ItemSpellDmgCap', '250', 'Spell Dmg adds to DD spells based on their cast & recast time');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:ItemSpellShieldingCap', '35', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:ItemStrikethroughCap', '35', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:ItemStunResistCap', '35', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:KillsPerGroupLeadershipAA', '250', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:KillsPerRaidLeadershipAA', '250', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:LeaveCorpses', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:LeaveNakedCorpses', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:LightBlueModifier', '40', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:MaintainIntoxicationAcrossZones', 'true', 'If true, alcohol effects are maintained across zoning and logging out/in.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:ManaRegenMultiplier', '100', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:MaxCharmDurationForPlayerCharacter', '15', '15 tics, each tic calculates every 6 seconds.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:MaxDraggedCorpses', '4', 'Maximum number of corpses that a player can /corpsedrag at once');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:MaxExpLevel', '60', 'Sets the Max Level attainable via Experience');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:MaxFearDurationForPlayerCharacter', '4', '4 tics, each tic calculates every 6 seconds.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:MaxLevel', '60', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:MinStatusForNoDropExemptions', '80', 'Enables bypassing of no-drop flags if status is set to this value and FVNoDropFlag is set to 2.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:PerCharacterQglobalMaxLevel', 'true', 'Allows Character Max Level based on qglobal \"CharMaxLevel');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:RaidExpMultiplier', '.8', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:RedModifier', '150', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:RespawnFromHover', 'false', 'Enable Respawn Window for SoF and later clients.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:RespawnFromHoverTimer', '300', 'Respawn Window Timer in Seconds.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:RestRegenEndurance', 'false', 'Whether rest regen will affect endurance or not');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:RestRegenPercent', '0', 'Set to >0 to enable rest state bonus HP and mana regen.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:RestRegenTimeToActivate', '60', 'Time in seconds for rest state regen to kick in.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:SharedBankPlat', 'false', 'off by default to prevent duping for now');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:SkillCapMaxLevel', '-1', 'Sets the Max Level used for Skill Caps (from skill_caps table).  Default of -1 makes it use MaxLevel rule value.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:SkillUpModifier', '100', 'skill ups are at 100%');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:SoDClientUseSoDHPManaEnd', 'true', 'Setting this to true will allow SoD clients to use the SoD HP/Mana/End formulas and previous clients will use the old formulas');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:StatCap', '0', 'Sets the Max Statistics Cap for PCs. 0 = feature disabled');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:SumCorpseDecayTimeMS', '43200000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:UseDeathExpLossMult', 'true', 'Adjust to use the above multiplier or to use code default.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:UseNewStatsWindow', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:UseRaceClassExpBonuses', 'false', 'Setting this to true will enable Class and Racial experience rate bonuses');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:UseXPConScaling', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:WhiteModifier', '100', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Character:YellowModifier', '125', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Chat:EnableAntiSpam', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Chat:EnableMailKeyIPVerification', 'false', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Chat:EnableVoiceMacros', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Chat:FlowCommandstoPerl_EVENT_SAY', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Chat:GlobalChatLevelLimit', '0', 'level limit you need to of reached to talk in ooc/auction/chat if your karma is too low.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Chat:IntervalDurationMS', '60000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Chat:KarmaGlobalChatLimit', '0', 'amount of karma you need to be able to talk in ooc/auction/chat below the level limit');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Chat:KarmaUpdateIntervalMS', '1200000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Chat:MaximumMessagesPerInterval', '12', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Chat:MaxMessagesBeforeKick', '20', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Chat:MinimumMessagesPerInterval', '4', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Chat:MinStatusToBypassAntiSpam', '80', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Chat:ServerWideAuction', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Chat:ServerWideOOC', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:ACDR', '6', 'AC offset for level-based tuning');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:AdjustProcPerMinute', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:AdjustSpecialProcPerMinute', 'false', 'Allow PPM for special abilities HeadShot, Assassinate, Decap ect.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:AgiHitFactor', '0.01', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:ArcheryBaseDamageBonus', '1.3', 'Modifier to Base Archery Damage .5 = 50%, 1 = 100%, 2 = 200%');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:ArcheryBonusRequiresStationary', 'true', 'does the 2x archery bonus chance require a stationary npc');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:ArcheryHitPenalty', '0.45', 'Archery has a hit penalty to try to help balance it with the plethora of long term +hit modifiers for it');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:ArcheryNPCMultiplier', '1.0', 'Multiplied by the min and max hit to determine npcs ranged dmg');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:AssistNoTargetSelf', 'false', 'When assisting a target without a target: true = target self, false = leave target as was before assist (this is the behavior on live)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:AvgDefProcsPerMinute', '2', 'Default 2. Determines defensive procs per minute.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:AvgProcsPerMinute', '2.0', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:AvgSpecialProcsPerMinute', '2.0', 'Set PPM for special abilities HeadShot, Assassinate, Decap ect. (Unknown what value live uses) .');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:BaseHitChance', '66.0', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:BaseProcChance', '0.035', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:BerserkBaseCritChance', '6', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:ClientBaseCritChance', '0', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:DefProcPerMinAgiContrib', '0.075', 'Default 25. Determines how much agility effects proc rate.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:DragonPunchBonus', '20', '% Modifier that this skill gets to str and skill bonuses');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:EagleStrikeBonus', '15', '% Modifier that this skill gets to str and skill bonuses');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:EnableFearPathing', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:FleeHPRatio', '8', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:FleeIfNotAlone', 'false', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:FleeSnareHPRatio', '21', 'HP at which snare will halt movement of a fleeing NPC.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:FlyingKickBonus', '25', '% Modifier that this skill gets to str and skill bonuses');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:FrenzyBonus', '0', 'Modify Frenzy skill damage by percent,');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:HitBonusPerLevel', '1.2', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:HitFalloffMajor', '50.0', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:HitFalloffMinor', '5.0', 'hit will fall off up to 5% over the initial level range');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:HitFalloffModerate', '7.0', 'hit will fall off up to 7% over the three levels after the initial level range');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:MaxFlurryHits', '2', 'max number of extra hits from flurry');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:MaxRampageTargets', '3', 'max number of people hit with rampage');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:MeleeBaseCritChance', '0', 'The base crit chance for non warriors:NOTE: This will apply to NPCs as well');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:MonkDamageTableBonus', '10', '% bonus monks get to their damage table calcs');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:NPCBashKickLevel', '6', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:NPCBashKickStunChance', '15', 'Percent chance that a bash/kick will stun');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:NPCBonusHitChance', '10', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:NPCFlurryChance', '20', '(Default=20) Chance for NPC to flurry if special attack F ');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:PetAttackMagicLevel', '30', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:ProcDexDivideBy', '11000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:ProcPerMinDexContrib', '0.075', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:RoundKickBonus', '5', '% Modifier that this skill gets to str and skill bonuses');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:SpecialAttackACBonus', '15', '(Default=15) Percent amount of damage per AC gained for certain special attacks (damage = AC*SpecialAttackACBonus/100).');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:TauntSkillFalloff', '0.15', '(Default=0.33) For every taunt skill point thats not maxed you lose this % chance to taunt.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:TigerClawBonus', '10', '% Modifier that this skill gets to str and skill bonuses');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:UseIntervalAC', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:WarBerBaseCritChance', '3', 'The base crit chance for warriors and berserkers:only applies to clients');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:WarriorThreatBonus', '60', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Combat:WeaponSkillFalloff', '0.33', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Console:SessionTimeOut', '600000', 'This sets the default timeout time for Telnet sessions (MS)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'EventLog:RecordBuyFromMerchant', 'false', 'Record purchases by a player from an NPC merchant in eventlog table');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'EventLog:RecordSellToMerchant', 'false', 'Record sales from a player to an NPC merchant in eventlog table');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'GM:MinStatusToZoneAnywhere', '250', 'This setting overrides the minstatus setting in the zones table if set');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Guild:MaxMembers', '2048', 'Max number of members allowed in a single guild');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Guild:PlayerCreationAllowed', 'true', 'Allow players with Underfoot+ to create a guild via new UI window.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Guild:PlayerCreationLimit', '1', 'Allow players to create a guild using the window in Underfoot+');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Guild:PlayerCreationRequiredLevel', '0', 'Required level to use the UF+ window to create a new guild.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Guild:PlayerCreationRequiredStatus', '0', 'Required admin status to use UF+ window to create a new guild.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Guild:PlayerCreationRequiredTime', '0', 'Required Time Entitled on Account to be able to use UF+ window to create a new guild.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Inventory:EnforceAugmentRestriction', 'false', 'Forces augment slot restrictions.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Inventory:EnforceAugmentUsability', 'false', 'Forces augmented item usability.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Inventory:EnforceAugmentWear', 'false', 'Forces augment wear slot validation.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Mail:EnableMailSystem', 'true', 'If false:client wont bring up the Mail window.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Mail:ExpireRead', '31536000', '1 Year. Set to -1 for never');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Mail:ExpireTrash', '0', 'Time in seconds. 0 will delete all messages in the trash when the mailserver starts');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Mail:ExpireUnread', '31536000', '1 Year. Set to -1 for never');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Map:FindBestZHeightAdjust', '10', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Map:FixPathingZAtWaypoints', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Map:FixPathingZMaxDeltaLoading', '20', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Map:FixPathingZMaxDeltaMoving', '20', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Map:FixPathingZMaxDeltaSendTo', '20', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Map:FixPathingZMaxDeltaWaypoint', '20', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Map:FixPathingZOnSendTo', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Map:FixPathingZWhenLoading', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Map:FixPathingZWhenMoving', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Map:UseClosestZ', 'false', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Merchant:BuyCostMod', '0.95', 'Modifier for NPC buy price.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Merchant:ChaBonusMod', '3.45', 'Determines CHA cap:from 104 CHA. 3.45 is 132 CHA at apprehensive. 0.34 is 400 CHA at apprehensive.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Merchant:ChaPenaltyMod', '1.52', 'Determines CHA bottom:up to 102 CHA. 1.52 is 37 CHA at apprehensive. 0.98 is 0 CHA at apprehensive.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Merchant:PriceBonusPct', '4', 'Determines maximum price bonus from having good faction/CHA. Value is a percent.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Merchant:PricePenaltyPct', '4', 'Determines maximum price penalty from having bad faction/CHA. Value is a percent.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Merchant:SellCostMod', '1.05', 'Modifier for NPC sell price.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Merchant:UsePriceMod', 'true', 'Use faction/charisma price modifiers.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Mercs:AggroRadius', '100', 'Determines the distance from which a merc will aggro target(also used to determine the distance at which a healer merc will begin healing a group member)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Mercs:AggroRadiusPuller', '25', 'Determines the distance from which a merc will aggro target, if they have the group role of puller (also used to determine the distance at which a healer merc will begin healing a group member, if they have the group role of puller)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Mercs:AllowMercs', 'false', 'Turns mercs on for the server - will not load merc data if set to false.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Mercs:ChargeMercPurchaseCost', 'false', 'Turns Mercenary purchase costs on or off.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Mercs:ChargeMercUpkeepCost', 'false', 'Turns Mercenary upkeep costs on or off.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Mercs:ResurrectRadius', '50', 'Determines the distance from which a healer merc will attempt to resurrect a corpse');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Mercs:ScaleRate', '100', 'Allows scaling of merc stats vs livelike values.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Mercs:SuspendIntervalMS', '10000', 'Time interval for suspend command in milliseconds.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Mercs:SuspendIntervalS', '10', 'Time interval for suspend command in seconds.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Mercs:UpkeepIntervalMS', '180000', 'Time interval for merc upkeep in milliseconds.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Mercs:UpkeepIntervalS', '180', 'Time interval for merc upkeep in seconds.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'NPC:BuffFriends', 'false', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'NPC:CorpseUnlockTimer', '150000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'NPC:EmptyNPCCorpseDecayTimeMS', '6000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'NPC:EnableNPCQuestJournal', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'NPC:LastFightingDelayMovingMax', '30000', 'Maximum time (in ms) before mob goes home after all aggro loss');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'NPC:LastFightingDelayMovingMin', '5000', 'Minimum time (in ms) before mob goes home after all aggro loss');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'NPC:LiveLikeEnrage', 'false', 'If enabled, will cause all non-player pets to lose the ability to enrage.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'NPC:MajorNPCCorpseDecayTimeMS', '1800000', 'level>=55');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'NPC:MinorNPCCorpseDecayTimeMS', '600000', 'level<55');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'NPC:OOCRegen', '10000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'NPC:ReturnNonQuestNoDropItems', 'false', 'Return NO DROP items on NPCs that do not have an EVENT_ITEM sub in their script');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'NPC:SayPauseTimeInSec', '10', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'NPC:SmartLastFightingDelayMoving', 'true', 'When true, mobs that started going home previously will do so again immediately if still on FD hate list');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'NPC:StartEnrageValue', '9', '% HP value that mobs will begin to enrage.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'NPC:UseItemBonusesForNonPets', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Pathing:Aggro', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Pathing:AggroReturnToGrid', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Pathing:CandidateNodeRangeXY', '400.000000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Pathing:CandidateNodeRangeZ', '50.0000000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Pathing:CullNodesFromEnd', '1', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Pathing:CullNodesFromStart', '1', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Pathing:Fear', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Pathing:Guard', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Pathing:LOSCheckFrequency', '500', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Pathing:MaxNodesLeftForLOSCheck', '1', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Pathing:MinDistanceForLOSCheckLong', '300.00', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Pathing:MinDistanceForLOSCheckShort', '400.00', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Pathing:MinNodesTraversedForLOSCheck', '3', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Pathing:RouteUpdateFrequencyLong', '5000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Pathing:RouteUpdateFrequencyNodeCount', '5', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Pathing:RouteUpdateFrequencyShort', '1000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Pathing:ZDiffThreshold', '10.0000000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Pets:AttackCommandRange', '200', 'Range at which a pet will respond to attack commands');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Pets:UnTargetableSwarmPet', 'false', 'Set true to allow swarm pets to not be targeted by clients.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'QueryServ:MerchantLogTransactions', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'QueryServ:PlayerChatLogging', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'QueryServ:PlayerLogDeletes', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'QueryServ:PlayerLogHandins', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'QueryServ:PlayerLogMoneyTrades', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'QueryServ:PlayerLogMoves', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'QueryServ:PlayerLogNPCKills', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'QueryServ:PlayerLogPCCoordinates', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'QueryServ:PlayerLogTrades', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Skills:MaxTradeskillSearchSkillDiff', '50', 'The maximum difference in skill between the trivial of an item and the skill of the player if the trivial is higher than the skill. Recipes that have not been learnt or made at least once via the Experiment mode will be removed from searches based on this criteria.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Skills:MaxTrainSpecializations', '50', 'Max level a GM trainer will train casting specializations');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Skills:MaxTrainTradeskills', '21', 'Highest skill level that tradeskills can be trained to from GM Trainers');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Skills:UseLimitTradeskillSearchSkillDiff', 'false', 'Enables the limit for the maximum difference between trivial and skill for recipe searches and favorites.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:AdditiveBonusValues', 'false', 'Allow certain bonuses to be calculated by adding together the value from each item, instead of taking the highest value. (ie Add together all Cleave Effects)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:AutoResistDiff', '15', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:AvgSpellProcsPerMinute', '6.0', 'Default = 6.0 Determines proc rate of spells applied from sympathetic focus effect');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:BaseCritChance', '0', 'base % chance that everyone has to crit a spell');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:BaseCritRatio', '100', 'base % bonus to damage on a successful spell crit. 100 = 2x damage');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:BuffLevelRestrictions', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:CharismaCharmDuration', 'false', 'Allow CHA to extend charm duration.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:CharismaEffectiveness', '10', 'Default 10 CHA = -1 resist mod. Deterimes how much resist modification charisma applies to charm/pacify checks.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:CharismaResistCap', '255', 'Maximium amount of CHA that will effect charm resist rate.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:CharmBreakCheckChance', '25', 'Default 25. Determines percent chance for a charm break check to occur each buff tick.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:DeathSaveCharismaMod', '3', 'Determines how much charisma effects chance of death save firing.(CHA*value/10)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:DivineInterventionHeal', '8000', 'Divine intervention heal amount.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:EnableBlockedBuffs', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:EnableSpellGlobals', 'false', 'If true, spells check the spell_globals table against quest globals before allowing spells to scribe via quest::scribespell');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:FearBreakCheckChance', '70', 'Chance for fear to do a resist check each tick. Decrease for longer fears.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:LiveLikeFocusEffects', 'true', 'Makes certain healing, dmg and mana reduction focuses random like live');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:MaxBuffSlotsNPC', '15', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:MaxCastTimeReduction', '50', 'Max percent your spell cast time can be reduced by spell haste.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:MaxDiscSlotsNPC', '1', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:MaxSongSlotsNPC', '10', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:MaxTotalSlotsNPC', '26', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:PartialHitChance', '0.6', 'The chance when a spell is resisted that it will partial hit.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:PartialHitChanceFear', '0.25', 'The chance when a fear spell is resisted that it will partial hit.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:ReflectType', '1', '0 = disabled, 1 = single target player spells only, 2 = all player spells, 3 = all single target spells, 4 = all spells');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:ResistChance', '10', 'chance to resist given no resists and same level');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:ResistFalloff', '67', 'Default = 67 Max that level that will adjust our resist chance based on level modifiers');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:ResistMod', '0.50', 'multiplier:chance to resist = this * ResistAmount');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:ResistPerLevelDiff', '100', '8.5 resist per level difference.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:RootBreakFromSpells', '55', 'Chance for root to break when cast on.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:SacrificeItemID', '9963', 'Item ID of the item Sacrifice will return. Defaults to an Essence Emerald.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:SacrificeMaxLevel', '59', 'Last level Sacrifice will work on');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:SacrificeMinLevel', '46', 'First level Sacrifice will work on');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:SuccorFailChance', '1', 'Determines chance for a succor spell not to teleport an invidual player.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:TranslocateTimeLimit', '0', 'If not zero:time in seconds to accept a Translocate.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:VirusSpreadDistance', '30', 'The distance a viral spell will jump to its next victim');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:WizCritChance', '5', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:WizCritLevel', '12', 'level wizards first get spell crits');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Spells:WizCritRatio', '0', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'TaskSystem:EnableTaskProximity', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'TaskSystem:EnableTaskSystem', 'true', 'Globally enable or disable the Task system');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'TaskSystem:KeepOneRecordPerCompletedTask', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'TaskSystem:PeriodicCheckTimer', '5', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'TaskSystem:RecordCompletedOptionalActivities', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'TaskSystem:RecordCompletedTasks', 'true', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Watermap:CheckForWaterAtWaypoints', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Watermap:CheckForWaterOnSendTo', 'false', 'Checks if a mob has moved into/out of water on SendTo');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Watermap:CheckForWaterWhenFishing', 'true', 'Only lets a player fish near water (if a water map exists for the zone)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Watermap:CheckForWaterWhenMoving', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Watermap:CheckWaypointsInWaterWhenLoading', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Watermap:FishingLineLength', '100', 'If water is more than this far below the player:it is considered too far to fish');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Watermap:FishingRodLength', '30', 'How far in front of player water must be for fishing to work');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:AccountSessionLimit', '1', 'Max number of characters allowed on at once from a single account (-1 is disabled)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:AddMaxClientsPerIP', '4', 'Maximum number of clients allowed to connect per IP address if account status is < ExemptMaxClientsStatus.  Default value: -1 (feature disabled)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:AddMaxClientsStatus', '1', 'Accounts with status >= this rule will be allowed to use the amount of accounts defined in the AddMaxClientsPerIP.  Default value: -1 (feature disabled)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:ClearTempMerchantlist', 'false', 'cavedude: Clears temp merchant items when world boots.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:ClientKeepaliveTimeoutMS', '32000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:DeleteStaleCorpeBackups', 'true', 'Deletes stale corpse backups older than 2 weeks.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:EnableReturnHomeButton', 'false', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:EnableTutorialButton', 'false', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:ExemptAccountLimitStatus', '200', 'Min status required to be exempt from multi-session per account limiting (-1 is disabled)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:ExemptMaxClientsStatus', '1', 'Exempt accounts from the MaxClientsPerIP and AddMaxClientsStatus rules:if their status is >= this value.  Default value: -1 (feature disabled)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:ExpansionSettings', '63', 'Expansion settings. Affects client features related to expansions.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:FVNoDropFlag', '0', 'Sets the FV ruleset to on or off. Enable with rule 2 for GM-trading only. Keep in mind this disables OOC chatter for GMs only if you choose that option.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:GMAccountIPList', 'false', 'Check ip list against GM Accounts:AntiHack GM Accounts.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:GuildBankZoneID', '345', 'ID of zone the Guild Bank works in. Default 345, guildhall');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:IPLimitDisconnectAll', 'false', 'Disconnect all current clients by IP if they go over the IP limit.  This should allow people to quickly reconnect in the case of dead sessions waiting to timeout.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:IsGMPetitionWindowEnabled', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:MaxClientsPerIP', '4', 'Maximum number of clients allowed to connect per IP address if account status is < AddMaxClientsStatus.  Default value: -1 (feature disabled)');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:MaxClientsSetByStatus', 'false', 'If True, IP Limiting will be set to the status on the account as long as the status is > MaxClientsPerIP');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:MaxLevelForTutorial', '15', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:MinGMAntiHackStatus', '11', 'Minimum GM status to check against AntiHack list');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:MinOfflineTimeToReturnHome', '21600', '21600 seconds is 6 Hours');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:PVPSettings', '0', 'PVP Settings, affects clients\' attack state and Sony-hardcoded checks for PVP rules.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:TutorialZoneID', '-1', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:UseBannedIPsTable', 'true', 'Toggle whether or not to check incoming client connections against the Banned_IPs table. Set this value to false to disable this feature.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'World:ZoneAutobootTimeoutMS', '120000', 'notation');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:AutoShutdownDelay', '5000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:ClientLinkdeadMS', '90000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:EnableMQGateDetector', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:EnableMQGhostDetector', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:EnableMQWarpDetector', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:EnableMQZoneDetector', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:EnableShadowrest', '0', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:GraveyardTimeMS', '1200000', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:HotZoneBonus', '0.75', 'hot zone XP bonus');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:LevelBasedEXPMods', 'true', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:MarkMQWarpLT', 'false', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:MQGateExemptStatus', '80', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:MQGhostExemptStatus', '80', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:MQWarpDetectionDistanceFactor', '9.0', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:MQWarpExemptStatus', '80', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:MQZoneExemptStatus', '80', '');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:NPCPositonUpdateTicCount', '32', 'ms between intervals of sending a position update to the entire zone.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:PEQZoneDebuff1', '4454', 'First debuff casted by #peqzone Default is Cursed Keepers Blight.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:PEQZoneDebuff2', '2209', 'Second debuff casted by #peqzone Default is Tendrils of Apathy.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:PEQZoneReuseTime', '300', 'Amount of time, in seconds, before you can reuse the #peqzone command');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:UsePEQZoneDebuffs', 'false', 'Will determine if #peqzone will debuff players or not when used.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:UsePlayerCorpseBackups', 'true', 'Keeps backups of player corpses.');
INSERT INTO `eqemu`.`rule_values` (`ruleset_id`, `rule_name`, `rule_value`, `notes`) VALUES ('111', 'Zone:WeatherTimer', '600', '');

